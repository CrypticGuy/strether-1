/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2020-01-31 22:30:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_html extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Live Stream</title>\n");
      out.write("<meta name=\"viewport\" content=\"width=1920px, initial-scale=1\">\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n");
      out.write("\tintegrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\n");
      out.write("\tcrossorigin=\"anonymous\">\n");
      out.write("<script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n");
      out.write("<script src=\"js/webrtc_adaptor.js\"></script>\n");
      out.write("<script\n");
      out.write("\t\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script>\n");
      out.write("<!-- The core Firebase JS SDK is always required and must be listed first -->\n");
      out.write("<script src=\"https://www.gstatic.com/firebasejs/5.5.3/firebase.js\"></script>\n");
      out.write("\n");
      out.write("<!-- TODO: Add SDKs for Firebase products that you want to use\n");
      out.write("\t https://firebase.google.com/docs/web/setup#available-libraries -->\n");
      out.write("\t <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jsSHA/2.0.2/sha.js\"></script>\n");
      out.write("<style>\n");
      out.write("video {\n");
      out.write("\twidth: 100%;\n");
      out.write("\tmax-width: 1100px;\n");
      out.write("}\n");
      out.write("/* Space out content a bit */\n");
      out.write("body {\n");
      out.write("\tpadding-top: 0px;\n");
      out.write("\tpadding-bottom: 0px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Everything but the jumbotron gets side spacing for mobile first views */\n");
      out.write(".header, .marketing, .footer {\n");
      out.write("\tpadding-right: 0px;\n");
      out.write("\tpadding-left: 0px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Custom page header */\n");
      out.write(".header {\n");
      out.write("\tpadding-bottom: 20px;\n");
      out.write("\tborder-bottom: 1px solid black;\n");
      out.write("}\n");
      out.write("/* Make the masthead heading the same height as the navigation */\n");
      out.write(".header h3 {\n");
      out.write("\tmargin-top: 0;\n");
      out.write("\tmargin-bottom: 0;\n");
      out.write("\tline-height: 0px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Custom page footer */\n");
      out.write(".footer {\n");
      out.write("\tpadding-top: 0px;\n");
      out.write("\tcolor:black;\n");
      out.write("\tborder-top: 1px solid black;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Customize container */\n");
      out.write("@media ( min-width : 768px) {\n");
      out.write("\t.container {\n");
      out.write("\t\tmax-width: 1100px;\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container-narrow>hr {\n");
      out.write("\tmargin: 0px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Main marketing message and sign up button */\n");
      out.write(".jumbotron {\n");
      out.write("\ttext-align: center;\n");
      out.write("\tborder-bottom: 0px solid black;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Responsive: Portrait tablets and up */\n");
      out.write("@media screen and (min-width: 1100px) {\n");
      out.write("\t/* Remove the padding we set earlier */\n");
      out.write("\t.header, .marketing, .footer {\n");
      out.write("\t\tpadding-right: 0;\n");
      out.write("\t\tpadding-left: 0;\n");
      out.write("\t}\n");
      out.write("\t/* Space out the masthead */\n");
      out.write("\t.header {\n");
      out.write("\t\tmargin-bottom: 0px;\n");
      out.write("\t}\n");
      out.write("\t/* Remove the bottom border on the jumbotron for visual effect */\n");
      out.write("\t.jumbotron {\n");
      out.write("\t\tborder-bottom: 0;\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("#localVideo {\n");
      out.write("\ttransform:rotateY(180deg)\n");
      out.write("}\n");
      out.write("\n");
      out.write(".btn {\n");
      out.write("  background-color: #555555;\n");
      out.write("  color: white;\n");
      out.write("  border: 2px solid #555555;\n");
      out.write("  padding: 25px 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".btn:hover {\n");
      out.write("  background-color: white;\n");
      out.write("  color: black;\n");
      out.write("  padding: 25px 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".form-control {\n");
      out.write("\tfont-size: x-large;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div class=\"container\">\n");
      out.write("\t\t<div class=\"jumbotron\">\n");
      out.write("\n");
      out.write("\t\t\t<p>\n");
      out.write("\t\t\t\t<video id=\"localVideo\" autoplay muted playsinline onclick=\"this.paused ? this.play() : this.pause();\"></video>\n");
      out.write("\t\t\t</p>\n");
      out.write("\n");
      out.write("\t\t\t<p>\n");
      out.write("\t\t\t\t<input type=\"text\" class=\"form-control\"\n");
      out.write("\t\t\t\t\tid=\"streamName\" placeholder=\"Type stream name\">\n");
      out.write("\t\t\t</p>\n");
      out.write("\t\t\t<p>\n");
      out.write("\t\t\t\t<input type=\"text\" class=\"form-control\"\n");
      out.write("\t\t\t\t\tid=\"description\" placeholder=\"Type description\">\n");
      out.write("\t\t\t</p>\n");
      out.write("\t\t\t<p>\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t<button onclick=\"startPublishing()\" class=\"btn\" disabled\n");
      out.write("\t\t\t\t\tid=\"start_publish_button\">Start Publishing</button>\n");
      out.write("\t\t\t\t<button onclick=\"stopPublishing()\" class=\"btn\" disabled\n");
      out.write("\t\t\t\t\tid=\"stop_publish_button\">Stop Publishing</button>\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t</p>\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t<span class=\"label label-success\" id=\"broadcastingInfo\" style=\"font-size:14px;display:none\"\n");
      out.write("\t\t\t\t\t\t\tstyle=\"display: none\">Publishing</span>\n");
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div>\n");
      out.write("\t\t\t<p id='list'></p>\n");
      out.write("\t\t\t<p id='hash'></p>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</body>\n");
      out.write("<script>\n");
      out.write("\tvar firebaseConfig = {\n");
      out.write("    apiKey: \"AIzaSyDYaHrD9ysia789xElEVLDCdQ4bQHvZd2k\",\n");
      out.write("    authDomain: \"livestream-e89a8.firebaseapp.com\",\n");
      out.write("    databaseURL: \"https://livestream-e89a8.firebaseio.com\",\n");
      out.write("    projectId: \"livestream-e89a8\",\n");
      out.write("    storageBucket: \"livestream-e89a8.appspot.com\",\n");
      out.write("    messagingSenderId: \"602941391992\",\n");
      out.write("    appId: \"1:602941391992:web:b93cc7ea39ebff4614998d\"\n");
      out.write("  };\n");
      out.write("  // Initialize Firebase\n");
      out.write("  firebase.initializeApp(firebaseConfig);\n");
      out.write("\tvar token = \"");
      out.print( request.getParameter("token") );
      out.write("\";\n");
      out.write("\n");
      out.write("\tvar start_publish_button = document.getElementById(\"start_publish_button\");\n");
      out.write("\tvar stop_publish_button = document.getElementById(\"stop_publish_button\");\n");
      out.write("\t\n");
      out.write("\tvar screen_share_checkbox = document.getElementById(\"screen_share_checkbox\");\n");
      out.write("\tvar install_extension_link = document.getElementById(\"install_chrome_extension_link\");\n");
      out.write("\n");
      out.write("\tvar streamNameBox = document.getElementById(\"streamName\");\n");
      out.write("\t\n");
      out.write("\tvar streamId;\n");
      out.write("\t\n");
      out.write("\tfunction getUrlParameter(sParam) {\n");
      out.write("\t    var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n");
      out.write("\t        sURLVariables = sPageURL.split('&'),\n");
      out.write("\t        sParameterName,\n");
      out.write("\t        i;\n");
      out.write("\n");
      out.write("\t    for (i = 0; i < sURLVariables.length; i++) {\n");
      out.write("\t        sParameterName = sURLVariables[i].split('=');\n");
      out.write("\n");
      out.write("\t        if (sParameterName[0] === sParam) {\n");
      out.write("\t            return sParameterName[1] === undefined ? true : sParameterName[1];\n");
      out.write("\t        }\n");
      out.write("\t    }\n");
      out.write("\t};\n");
      out.write("\t\n");
      out.write("\tvar name = getUrlParameter(\"name\");\n");
      out.write("\tif(name !== \"undefined\")\n");
      out.write("\t{\n");
      out.write("\t\tstreamNameBox.value = name;\n");
      out.write("\t}\n");
      out.write("\tvar RTCPeerConnection = /*window.RTCPeerConnection ||*/ window.webkitRTCPeerConnection || window.mozRTCPeerConnection;\n");
      out.write("\n");
      out.write("if (RTCPeerConnection) (function () {\n");
      out.write("    var rtc = new RTCPeerConnection({iceServers:[]});\n");
      out.write("    if (1 || window.mozRTCPeerConnection) {      // FF [and now Chrome!] needs a channel/stream to proceed\n");
      out.write("        rtc.createDataChannel('', {reliable:false});\n");
      out.write("    };\n");
      out.write("    \n");
      out.write("    rtc.onicecandidate = function (evt) {\n");
      out.write("        // convert the candidate to SDP so we can run it through our general parser\n");
      out.write("        // see https://twitter.com/lancestout/status/525796175425720320 for details\n");
      out.write("        if (evt.candidate) grepSDP(\"a=\"+evt.candidate.candidate);\n");
      out.write("    };\n");
      out.write("    rtc.createOffer(function (offerDesc) {\n");
      out.write("        grepSDP(offerDesc.sdp);\n");
      out.write("        rtc.setLocalDescription(offerDesc);\n");
      out.write("    }, function (e) { console.warn(\"offer failed\", e); });\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    var addrs = Object.create(null);\n");
      out.write("    addrs[\"0.0.0.0\"] = false;\n");
      out.write("    function updateDisplay(newAddr) {\n");
      out.write("        if (newAddr in addrs) return;\n");
      out.write("        else addrs[newAddr] = true;\n");
      out.write("        var displayAddrs = Object.keys(addrs).filter(function (k) { return addrs[k]; });\n");
      out.write("        document.getElementById('list').textContent = displayAddrs.join(\" or perhaps \") || \"n/a\";\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function grepSDP(sdp) {\n");
      out.write("        var hosts = [];\n");
      out.write("        sdp.split('\\r\\n').forEach(function (line) { // c.f. http://tools.ietf.org/html/rfc4566#page-39\n");
      out.write("            if (~line.indexOf(\"a=candidate\")) {     // http://tools.ietf.org/html/rfc4566#section-5.13\n");
      out.write("                var parts = line.split(' '),        // http://tools.ietf.org/html/rfc5245#section-15.1\n");
      out.write("                    addr = parts[4],\n");
      out.write("                    type = parts[7];\n");
      out.write("                if (type === 'host') updateDisplay(addr);\n");
      out.write("            } else if (~line.indexOf(\"c=\")) {       // http://tools.ietf.org/html/rfc4566#section-5.7\n");
      out.write("                var parts = line.split(' '),\n");
      out.write("                    addr = parts[2];\n");
      out.write("                updateDisplay(addr);\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("})(); else {\n");
      out.write("    document.getElementById('list').innerHTML = \"<code>ifconfig | grep inet | grep -v inet6 | cut -d\\\" \\\" -f2 | tail -n1</code>\";\n");
      out.write("    document.getElementById('list').nextSibling.textContent = \"In Chrome and Firefox your IP should display automatically, by the power of WebRTCskull.\";\n");
      out.write("}\n");
      out.write("\n");
      out.write("\tfunction startPublishing() {\n");
      out.write("\t\tstreamname=streamNameBox.value;\n");
      out.write("\t\tvar hashobj=new jsSHA(\"SHA-512\", \"TEXT\", {numRounds:1});\n");
      out.write("\t\thashobj.update(streamname);\n");
      out.write("  \t\tvar hash = hashobj.getHash(\"HEX\");\n");
      out.write("\t\tdocument.getElementById('hash').innerHTML=hash\n");
      out.write("\t\tfirebase.database().ref('streamers/'+hash).set({\n");
      out.write("\t\t\tstreamname:streamname,\n");
      out.write("\t\t\tip: document.getElementById('list').innerHTML,\n");
      out.write("\t\t\thash: hash,\n");
      out.write("\t\t\tdescription: document.getElementById('description').value\n");
      out.write("\t\t})\n");
      out.write("\t\twebRTCAdaptor.publish(hash, token);\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction stopPublishing() {\n");
      out.write("\t\thash=document.getElementById('hash').innerHTML\n");
      out.write("\t\tfirebase.database().ref('streamers/').child(hash).remove();\n");
      out.write("\t\tdocument.getElementById('hash').innerHTML=''\n");
      out.write("\t\twebRTCAdaptor.stop(hash);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction enableDesktopCapture(enable) {\n");
      out.write("\t\tif (enable == true) {\n");
      out.write("\t\t\twebRTCAdaptor.switchDesktopCapture(streamId);\n");
      out.write("\t\t}\n");
      out.write("\t\telse {\n");
      out.write("\t\t\twebRTCAdaptor.switchVideoCapture(streamId);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("    function startAnimation() {\n");
      out.write("\n");
      out.write("        $(\"#broadcastingInfo\").fadeIn(800, function () {\n");
      out.write("          $(\"#broadcastingInfo\").fadeOut(800, function () {\n");
      out.write("        \tvar state = webRTCAdaptor.signallingState(streamId);\n");
      out.write("            if (state != null && state != \"closed\") {\n");
      out.write("            \tvar iceState = webRTCAdaptor.iceConnectionState(streamId);\n");
      out.write("            \tif (iceState != null && iceState != \"failed\" && iceState != \"disconnected\") {\n");
      out.write("              \t\tstartAnimation();\n");
      out.write("            \t}\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("        });\n");
      out.write("\n");
      out.write("      }\n");
      out.write("\n");
      out.write("\tvar pc_config = null;\n");
      out.write("\n");
      out.write("\tvar sdpConstraints = {\n");
      out.write("\t\tOfferToReceiveAudio : false,\n");
      out.write("\t\tOfferToReceiveVideo : false\n");
      out.write("\n");
      out.write("\t};\n");
      out.write("\t\n");
      out.write("\tvar mediaConstraints = {\n");
      out.write("\t\tvideo : true,\n");
      out.write("\t\taudio : true\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\tvar appName = location.pathname.substring(0, location.pathname.lastIndexOf(\"/\")+1);\n");
      out.write("\tvar path =  location.hostname + \":\" + location.port + appName + \"websocket\";\n");
      out.write("\tvar websocketURL =  \"ws://\" + path;\n");
      out.write("\t\n");
      out.write("\tif (location.protocol.startsWith(\"https\")) {\n");
      out.write("\t\twebsocketURL = \"wss://\" + path;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\tvar webRTCAdaptor = new WebRTCAdaptor({\n");
      out.write("\t\twebsocket_url : websocketURL,\n");
      out.write("\t\tmediaConstraints : mediaConstraints,\n");
      out.write("\t\tpeerconnection_config : pc_config,\n");
      out.write("\t\tsdp_constraints : sdpConstraints,\n");
      out.write("\t\tlocalVideoId : \"localVideo\",\n");
      out.write("\t\tdebug:true,\n");
      out.write("\t\tcallback : function(info, obj) {\n");
      out.write("\t\t\tif (info == \"initialized\") {\n");
      out.write("\t\t\t\tconsole.log(\"initialized\");\n");
      out.write("\t\t\t\tstart_publish_button.disabled = false;\n");
      out.write("\t\t\t\tstop_publish_button.disabled = true;\n");
      out.write("\t\t\t} else if (info == \"publish_started\") {\n");
      out.write("\t\t\t\t//stream is being published\n");
      out.write("\t\t\t\tconsole.log(\"publish started\");\n");
      out.write("\t\t\t\tstart_publish_button.disabled = true;\n");
      out.write("\t\t\t\tstop_publish_button.disabled = false;\n");
      out.write("\t\t\t\tstartAnimation();\n");
      out.write("\t\t\t} else if (info == \"publish_finished\") {\n");
      out.write("\t\t\t\t//stream is being finished\n");
      out.write("\t\t\t\tconsole.log(\"publish finished\");\n");
      out.write("\t\t\t\tstart_publish_button.disabled = false;\n");
      out.write("\t\t\t\tstop_publish_button.disabled = true;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (info == \"screen_share_extension_available\") {\n");
      out.write("\t\t\t\tscreen_share_checkbox.disabled = false;\n");
      out.write("\t\t\t\tconsole.log(\"screen share extension available\");\n");
      out.write("\t\t\t\tinstall_extension_link.style.display = \"none\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (info == \"screen_share_stopped\") {\n");
      out.write("\t\t\t\tconsole.log(\"screen share stopped\");\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (info == \"closed\") {\n");
      out.write("\t\t\t\t//console.log(\"Connection closed\");\n");
      out.write("\t\t\t\tif (typeof obj != \"undefined\") {\n");
      out.write("\t\t\t\t\tconsole.log(\"Connecton closed: \" + JSON.stringify(obj));\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (info == \"pong\") {\n");
      out.write("\t\t\t\t//ping/pong message are sent to and received from server to make the connection alive all the time\n");
      out.write("\t\t\t\t//It's especially useful when load balancer or firewalls close the websocket connection due to inactivity\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (info == \"refreshConnection\") {\n");
      out.write("\t\t\t\tstartPublishing();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (info == \"updated_stats\") {\n");
      out.write("\t\t\t\t//obj is the PeerStats which has fields\n");
      out.write("\t\t\t\t //averageOutgoingBitrate - kbits/sec\n");
      out.write("\t\t\t\t//currentOutgoingBitrate - kbits/sec\n");
      out.write("\t\t\t\tconsole.log(\"Average outgoing bitrate \" + obj.averageOutgoingBitrate + \" kbits/sec\"\n");
      out.write("\t\t\t\t\t\t+ \" Current outgoing bitrate: \" + obj.currentOutgoingBitrate + \" kbits/sec\");\n");
      out.write("\t\t\t\t \n");
      out.write("\t\t\t}\n");
      out.write("\t\t},\n");
      out.write("\t\tcallbackError : function(error, message) {\n");
      out.write("\t\t\t//some of the possible errors, NotFoundError, SecurityError,PermissionDeniedError\n");
      out.write("            \n");
      out.write("\t\t\tconsole.log(\"error callback: \" +  JSON.stringify(error));\n");
      out.write("\t\t\tvar errorMessage = JSON.stringify(error);\n");
      out.write("\t\t\tif (typeof message != \"undefined\") {\n");
      out.write("\t\t\t\terrorMessage = message;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tvar errorMessage = JSON.stringify(error);\n");
      out.write("\t\t\tif (error.indexOf(\"NotFoundError\") != -1) {\n");
      out.write("\t\t\t\terrorMessage = \"Camera or Mic are not found or not allowed in your device\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (error.indexOf(\"NotReadableError\") != -1 || error.indexOf(\"TrackStartError\") != -1) {\n");
      out.write("\t\t\t\terrorMessage = \"Camera or Mic is being used by some other process that does not let read the devices\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if(error.indexOf(\"OverconstrainedError\") != -1 || error.indexOf(\"ConstraintNotSatisfiedError\") != -1) {\n");
      out.write("\t\t\t\terrorMessage = \"There is no device found that fits your video and audio constraints. You may change video and audio constraints\"\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (error.indexOf(\"NotAllowedError\") != -1 || error.indexOf(\"PermissionDeniedError\") != -1) {\n");
      out.write("\t\t\t\terrorMessage = \"You are not allowed to access camera and mic.\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse if (error.indexOf(\"TypeError\") != -1) {\n");
      out.write("\t\t\t\terrorMessage = \"Video/Audio is required\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t\talert(errorMessage);\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("</script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
